input.file.name <- 'D2.csv'
#colnames(f1)<- c("objectid","timestamp","state_id")
objectid.pos<-1
timestamp.pos<-2
stateid.pos<-3
secs.between.sequences <- 800*60 #according to examined histogram based on first 100000 records
sample.size <- 25000
k=25
similarity=1
inverse_method=T
skip=F
timestamp.format='%Y-%m-%d %H:%M:%S'
f <- read.delim(input.file.name, header=T, sep=',',skip=skip,nrows=sample.size,stringsAsFactors =F)
#generator<- sequencesGenerator(f,objectid.pos=objectid.pos,seq_id.pos=0,timestamp.pos=timestamp.pos,stateid.pos=stateid.pos,secs.between.sequences=secs.between.sequences,timestamp.format='%Y-%m-%dT%H:%M:%S')
generator<- sequencesGenerator(f,objectid.pos=objectid.pos,timestamp.pos=timestamp.pos,stateid.pos=stateid.pos,seq_id.pos=0,secs.between.sequences=secs.between.sequences,timestamp.format=timestamp.format)
df <- generator$src
rm(f)
n.sequences <- length(unique(df$seq_id))
if(k==0)
{
cur.k=1
} else {
cur.k = ceiling(k/100 * n.sequences)
}
#cur.k=1
set.seed(123)
df.clustered <- cluster.sequences(s=df,clusters.k=cur.k,sim.measure=similarity,shingle.size=2,num.hashes=200)
model<-build.model(clustered.data=df.clustered,c_eps=1)#,min.objects=0,max.freq=1)
#M<-build.model(clustered.data=df.clustered,min.objects=0,max.freq=1)
#setwd("D:\\sigal\\doctorat\\thesis\\sequencesGenerator");
set.seed(123)
synthetic.data <- generate.synthetic.data(m=model,p.method=inverse_method)
cur.sampled.tbe
m$mean.transition.tbe
m$mean.transition.tbe$tbe
m$mean.transition.tbe
m$mean.transition.tbe[2]
m$mean.transition.tbe[,2]
cur.tbe<- mean(m$mean.transition.tbe[,2])
cur.tbe
clustered.data=df.clustered
s <- clustered.data
s$next_seqid <- c(s$seq_id[2:dim(s)[1]],NA)
s$next_state_id <- c(s$state_id[2:dim(s)[1]],NA)
s$next_state_id <- ifelse(s$next_seqid!=s$seq_id, NA, s$next_state_id)
s$next_state_id <- ifelse(is.na(s$next_state_id), NA, s$next_state_id)
s$tbe <- c(s$timestamp[2:dim(s)[1]],NA)- s$timestamp
s$tbe <- ifelse(s$next_seqid!=s$seq_id, NA, s$tbe)
#Calculates number of states for each object
sequences <- dplyr::group_by(s,objectid)
sequences <- dplyr::mutate(sequences, obj_length = n())
sequences<- dplyr::ungroup(sequences)
#Calculates time duration of each sequence
sequences <- calc.seq.duration(sequences)
#add timestamp driven factors (hour & weekday)
sequences<-dplyr::mutate(sequences,hour=as.numeric(substr(timestamp,12,13)))#,weekday =as.POSIXlt(date)$wday)
start.of.obj <- dplyr::group_by(sequences,objectid)
start.of.obj <- dplyr::mutate(start.of.obj,num.seq=n_distinct(seq_id))
start.of.obj <- dplyr::filter(start.of.obj, timestamp == first(timestamp),row_number()==1)
#calculating starting sequences per hour in each cluster
#   new.objects.per.date<-calc.single.model(clustered.data=start.of.obj,relevant.col.names=c("objectid","num.seq","cluster_id","timestamp","seq_duration"),factor.calculation="as.Date(as.POSIXlt(timestamp))",by.col.names = c("cluster_id","factor","seq_duration"),within.col.names=c(),statistics.calculations =c("n_distinct(objectid)","mean(num.seq)","sd(num.seq)"),statistics.col.names=c("objects","mean.num.seq","sd.num.seq"))
#   names(new.objects.per.date)[names(new.objects.per.date)=="factor"]<-"date"
start.of.obj
start.list <- dplyr::group_by_(start.of.obj,.dots=c("as.Date(as.POSIXlt(timestamp))"))
start.list <- dplyr::summarise_(start.list,.dots= c("n_distinct(objectid)","mean(num.seq)","sd(num.seq)"))
start.list[is.na(start.list)] <- 0
names(start.list)<- c("date","objects","mean.num.seq","sd.num.seq")
supression_log <- matrix(data=NA,nrow=0,ncol=2)
colnames(supression_log) = c("model","supressed_pct")
new.objects.per.date<-calc.single.model(clustered.data=start.of.obj,relevant.col.names=c("objectid","num.seq","cluster_id","timestamp","seq_duration"),factor.calculation="as.Date(as.POSIXlt(timestamp))",by.col.names = c("cluster_id","factor","seq_duration"),within.col.names=c(),statistics.calculations =c("n_distinct(objectid)","mean(num.seq)","sd(num.seq)"),statistics.col.names=c("objects","mean.num.seq","sd.num.seq"))
names(new.objects.per.date)[names(new.objects.per.date)=="factor"]<-"date"
#factor.week.start.cluster
#cur.model<-calc.single.model(clustered.data=start.of.obj,relevant.col.names=c("objectid","seq_id","cluster_id","timestamp"),factor.calculation="as.integer(ceiling(as.POSIXlt(timestamp)$yday/4))",by.col.names = c("cluster_id","factor"),within.col.names=c(),statistics.calculations =c("n_distinct(seq_id)","n_distinct(objectid)","n()"),statistics.col.names=c("sequences","objects","total"),eps=c_eps)
cur.model<-calc.single.model(clustered.data=start.of.obj,relevant.col.names=c("objectid","seq_id","cluster_id","timestamp"),factor.calculation="as.numeric(format(as.POSIXlt(timestamp), \"%w\"))",by.col.names = c("cluster_id","factor"),within.col.names=c(),statistics.calculations =c("n_distinct(seq_id)","n_distinct(objectid)","n()"),statistics.col.names=c("sequences","objects","total"),eps=c_eps)
factor.1.start.cluster <- to.valid.matrix(cur.model$stats)
supression_log <- rbind(supression_log,c(model="factor.1.start.cluster",supressed_pct=cur.model$supressed))
#factor.month.start.cluster
cur.model<-calc.single.model(clustered.data=start.of.obj,relevant.col.names=c("objectid","seq_id","cluster_id","timestamp"),factor.calculation="as.POSIXlt(timestamp)$mon",by.col.names = c("cluster_id","factor"),within.col.names=c(),statistics.calculations =c("n_distinct(seq_id)","n_distinct(objectid)","n()"),statistics.col.names=c("sequences","objects","total"),eps=c_eps)
factor.2.start.cluster <- to.valid.matrix(cur.model$stats)
supression_log <- rbind(supression_log,c(model="factor.2.start.cluster",supressed_pct=cur.model$supressed))
#factor.year.start.cluster
cur.model<-calc.single.model(clustered.data=start.of.obj,relevant.col.names=c("objectid","seq_id","cluster_id","timestamp"),factor.calculation="as.POSIXlt(timestamp)$year",by.col.names = c("cluster_id","factor"),within.col.names=c(),statistics.calculations =c("n_distinct(seq_id)","n_distinct(objectid)","n()"),statistics.col.names=c("sequences","objects","total"),eps=c_eps)
factor.3.start.cluster <- to.valid.matrix(cur.model$stats)
supression_log <- rbind(supression_log,c(model="factor.3.start.cluster",supressed_pct=cur.model$supressed))
#nofactor.start.cluster
cur.model<-calc.single.model(clustered.data=start.of.obj,relevant.col.names=c("objectid","seq_id","cluster_id","timestamp"),factor.calculation=NA,by.col.names = c("cluster_id"),within.col.names=c(),statistics.calculations =c("n_distinct(seq_id)","n_distinct(objectid)","n()"),statistics.col.names=c("sequences","objects","total"),eps=c_eps)
nofactor.start.cluster <- to.valid.matrix(cur.model$stats)
supression_log <- rbind(supression_log,c(model="nofactor.start.cluster",supressed_pct=cur.model$supressed))
start.of.seq <- dplyr::group_by(sequences,seq_id)
######
start.of.seq <- dplyr::filter(start.of.seq, timestamp == first(timestamp),row_number()==1)
#factor.week.seq_duration
#cur.model<- calc.single.model(clustered.data=start.of.seq,relevant.col.names=c("objectid","seq_id","cluster_id","timestamp","hour","seq_duration","seq_duration_numeric"),factor.calculation="as.integer(ceiling(as.POSIXlt(timestamp)$yday/4))",by.col.names = c("cluster_id","factor"),within.col.names=c("hour","seq_duration"),statistics.calculations =c("n_distinct(seq_id)","n_distinct(objectid)","n()","mean(seq_duration_numeric)","sd(seq_duration_numeric)"),statistics.col.names=c("sequences","objects","total","seq_duration_numeric","dur_sd"),eps=c_eps)
cur.model<- calc.single.model(clustered.data=start.of.seq,relevant.col.names=c("objectid","seq_id","cluster_id","timestamp","hour","seq_duration","seq_duration_numeric"),factor.calculation="as.numeric(format(as.POSIXlt(timestamp), \"%w\"))",by.col.names = c("cluster_id","factor"),within.col.names=c("hour","seq_duration"),statistics.calculations =c("n_distinct(seq_id)","n_distinct(objectid)","n()","mean(seq_duration_numeric)","sd(seq_duration_numeric)"),statistics.col.names=c("sequences","objects","total","seq_duration_numeric","dur_sd"),eps=c_eps)
factor.1.start_info <- to.valid.matrix(cur.model$stats)
supression_log <- rbind(supression_log,c(model="factor.1.start_info",supressed_pct=cur.model$supressed))
#factor.month.seq_duration
cur.model<- calc.single.model(clustered.data=start.of.seq,relevant.col.names=c("objectid","seq_id","cluster_id","timestamp","hour","seq_duration","seq_duration_numeric"),factor.calculation="as.POSIXlt(timestamp)$mon",by.col.names = c("cluster_id","factor"),within.col.names=c("hour","seq_duration"),statistics.calculations =c("n_distinct(seq_id)","n_distinct(objectid)","n()","mean(seq_duration_numeric)","sd(seq_duration_numeric)"),statistics.col.names=c("sequences","objects","total","seq_duration_numeric","dur_sd"),eps=c_eps)
factor.2.start_info <- to.valid.matrix(cur.model$stats)
supression_log <- c(model="factor.2.start_info",supressed_pct=cur.model$supressed)
#factor.year.seq_duration
cur.model <- calc.single.model(clustered.data=start.of.seq,relevant.col.names=c("objectid","seq_id","cluster_id","timestamp","hour","seq_duration","seq_duration_numeric"),factor.calculation="as.POSIXlt(timestamp)$year",by.col.names = c("cluster_id","factor"),within.col.names=c("hour","seq_duration"),statistics.calculations =c("n_distinct(seq_id)","n_distinct(objectid)","n()","mean(seq_duration_numeric)","sd(seq_duration_numeric)"),statistics.col.names=c("sequences","objects","total","seq_duration_numeric","dur_sd"),eps=c_eps)
factor.3.start_info <- to.valid.matrix(cur.model$stats)
supression_log <- rbind(supression_log,c(model="factor.3.start_info",supressed_pct=cur.model$supressed))
#nofactor.seq_duration
cur.model<- calc.single.model(clustered.data=start.of.seq,relevant.col.names=c("objectid","seq_id","cluster_id","timestamp","hour","seq_duration","seq_duration_numeric"),factor.calculation=NA,by.col.names = c("cluster_id"),within.col.names=c("hour","seq_duration"),statistics.calculations =c("n_distinct(seq_id)","n_distinct(objectid)","n()","mean(seq_duration_numeric)","sd(seq_duration_numeric)"),statistics.col.names=c("sequences","objects","total","seq_duration_numeric","dur_sd"),eps=c_eps)
nofactor.start_info <- to.valid.matrix(cur.model$stats)
supression_log <- rbind(supression_log,c(model="nofactor.start_info",supressed_pct=cur.model$supressed))
#nocluster.factor.week.seq_duration
#cur.model<- calc.single.model(clustered.data=start.of.seq,relevant.col.names=c("objectid","seq_id","timestamp","hour","seq_duration","seq_duration_numeric"),factor.calculation="as.integer(ceiling(as.POSIXlt(timestamp)$yday/4))",by.col.names = c("factor"),within.col.names=c("hour","seq_duration"),statistics.calculations =c("n_distinct(seq_id)","n_distinct(objectid)","n()","mean(seq_duration_numeric)","sd(seq_duration_numeric)"),statistics.col.names=c("sequences","objects","total","seq_duration_numeric","dur_sd"),eps=c_eps)
cur.model<- calc.single.model(clustered.data=start.of.seq,relevant.col.names=c("objectid","seq_id","timestamp","hour","seq_duration","seq_duration_numeric"),factor.calculation="as.numeric(format(as.POSIXlt(timestamp), \"%w\"))",by.col.names = c("factor"),within.col.names=c("hour","seq_duration"),statistics.calculations =c("n_distinct(seq_id)","n_distinct(objectid)","n()","mean(seq_duration_numeric)","sd(seq_duration_numeric)"),statistics.col.names=c("sequences","objects","total","seq_duration_numeric","dur_sd"),eps=c_eps)
nocluster.factor.1.start_info <- to.valid.matrix(cur.model$stats)
supression_log <- rbind(supression_log,c(model="nocluster.factor.1.start_info",supressed_pct=cur.model$supressed))
#nocluster.factor.month.seq_duration
cur.model<- calc.single.model(clustered.data=start.of.seq,relevant.col.names=c("objectid","seq_id","timestamp","hour","seq_duration","seq_duration_numeric"),factor.calculation="as.POSIXlt(timestamp)$mon",by.col.names = c("factor"),within.col.names=c("hour","seq_duration"),statistics.calculations =c("n_distinct(seq_id)","n_distinct(objectid)","n()","mean(seq_duration_numeric)","sd(seq_duration_numeric)"),statistics.col.names=c("sequences","objects","total","seq_duration_numeric","dur_sd"),eps=c_eps)
nocluster.factor.2.start_info <- to.valid.matrix(cur.model$stats)
supression_log <- c(model="nocluster.factor.2.start_info",supressed_pct=cur.model$supressed)
#nocluster.factor.year.seq_duration
cur.model <- calc.single.model(clustered.data=start.of.seq,relevant.col.names=c("objectid","seq_id","timestamp","hour","seq_duration","seq_duration_numeric"),factor.calculation="as.POSIXlt(timestamp)$year",by.col.names = c("factor"),within.col.names=c("hour","seq_duration"),statistics.calculations =c("n_distinct(seq_id)","n_distinct(objectid)","n()","mean(seq_duration_numeric)","sd(seq_duration_numeric)"),statistics.col.names=c("sequences","objects","total","seq_duration_numeric","dur_sd"),eps=c_eps)
nocluster.factor.3.start_info <- to.valid.matrix(cur.model$stats)
supression_log <- rbind(supression_log,c(model="nocluster.factor.3.start_info",supressed_pct=cur.model$supressed))
#nocluster.nofactor.seq_duration
cur.model<- calc.single.model(clustered.data=start.of.seq,relevant.col.names=c("objectid","seq_id","timestamp","hour","seq_duration","seq_duration_numeric"),factor.calculation=NA,by.col.names = c(),within.col.names=c("hour","seq_duration"),statistics.calculations =c("n_distinct(seq_id)","n_distinct(objectid)","n()","mean(seq_duration_numeric)","sd(seq_duration_numeric)"),statistics.col.names=c("sequences","objects","total","seq_duration_numeric","dur_sd"),eps=c_eps)
nocluster.nofactor.start_info <- to.valid.matrix(cur.model$stats)
supression_log <- rbind(supression_log,c(model="nocluster.nofactor.start_info",supressed_pct=cur.model$supressed))
#factor.dur.starting.state
cur.model<-calc.single.model(clustered.data=start.of.seq,relevant.col.names=c("objectid","seq_id","cluster_id","timestamp","state_id","seq_duration"),factor.calculation="seq_duration",by.col.names = c("cluster_id","factor"),within.col.names=c("state_id"),statistics.calculations =c("n_distinct(seq_id)","n_distinct(objectid)","n()"),statistics.col.names=c("sequences","objects","total"),eps=c_eps)
factor.1.starting.state <- to.valid.matrix(cur.model$stats)
supression_log <- rbind(supression_log,c(model="factor.1.starting.state",supressed_pct=cur.model$supressed))
#factor.hour.starting.state
cur.model<-calc.single.model(clustered.data=start.of.seq,relevant.col.names=c("objectid","seq_id","cluster_id","timestamp","state_id"),factor.calculation="as.numeric(format(as.POSIXlt(timestamp), \"%H\"))",by.col.names = c("cluster_id","factor"),within.col.names=c("state_id"),statistics.calculations =c("n_distinct(seq_id)","n_distinct(objectid)","n()"),statistics.col.names=c("sequences","objects","total"),eps=c_eps)
factor.2.starting.state <- to.valid.matrix(cur.model$stats)
supression_log <- rbind(supression_log,c(model="factor.2.starting.state",supressed_pct=cur.model$supressed))
#factor.weekday.starting.state
cur.model<-calc.single.model(clustered.data=start.of.seq,relevant.col.names=c("objectid","seq_id","cluster_id","timestamp","state_id"),factor.calculation="as.numeric(format(as.POSIXlt(timestamp), \"%w\"))",by.col.names = c("cluster_id","factor"),within.col.names=c("state_id"),statistics.calculations =c("n_distinct(seq_id)","n_distinct(objectid)","n()"),statistics.col.names=c("sequences","objects","total"),eps=c_eps)
factor.3.starting.state <- to.valid.matrix(cur.model$stats)
supression_log <- rbind(supression_log,c(model="factor.3.starting.state",supressed_pct=cur.model$supressed))
#nofactor.starting.state
cur.model<-calc.single.model(clustered.data=start.of.seq,relevant.col.names=c("objectid","seq_id","cluster_id","timestamp","state_id"),factor.calculation=NA,by.col.names = c("cluster_id"),within.col.names=c("state_id"),statistics.calculations =c("n_distinct(seq_id)","n_distinct(objectid)","n()"),statistics.col.names=c("sequences","objects","total"),eps=c_eps)
nofactor.starting.state <- to.valid.matrix(cur.model$stats)
supression_log <- rbind(supression_log,c(model="nofactor.starting.state",supressed_pct=cur.model$supressed))
#nocluster.factor.dur.starting.state
cur.model<-calc.single.model(clustered.data=start.of.seq,relevant.col.names=c("objectid","seq_id","timestamp","state_id","seq_duration"),factor.calculation="seq_duration",by.col.names = c("factor"),within.col.names=c("state_id"),statistics.calculations =c("n_distinct(seq_id)","n_distinct(objectid)","n()"),statistics.col.names=c("sequences","objects","total"),eps=c_eps)
nocluster.factor.1.starting.state <- to.valid.matrix(cur.model$stats)
supression_log <- rbind(supression_log,c(model="nocluster.factor.1.starting.state",supressed_pct=cur.model$supressed))
#nocluster.factor.hour.starting.state
cur.model<-calc.single.model(clustered.data=start.of.seq,relevant.col.names=c("objectid","seq_id","timestamp","state_id"),factor.calculation="as.numeric(format(as.POSIXlt(timestamp), \"%H\"))",by.col.names = c("factor"),within.col.names=c("state_id"),statistics.calculations =c("n_distinct(seq_id)","n_distinct(objectid)","n()"),statistics.col.names=c("sequences","objects","total"),eps=c_eps)
nocluster.factor.2.starting.state <- to.valid.matrix(cur.model$stats)
supression_log <- rbind(supression_log,c(model="nocluster.factor.2.starting.state",supressed_pct=cur.model$supressed))
#nocluster.factor.weekday.starting.state
cur.model<-calc.single.model(clustered.data=start.of.seq,relevant.col.names=c("objectid","seq_id","timestamp","state_id"),factor.calculation="as.numeric(format(as.POSIXlt(timestamp), \"%w\"))",by.col.names = c("factor"),within.col.names=c("state_id"),statistics.calculations =c("n_distinct(seq_id)","n_distinct(objectid)","n()"),statistics.col.names=c("sequences","objects","total"),eps=c_eps)
nocluster.factor.3.starting.state <- to.valid.matrix(cur.model$stats)
supression_log <- rbind(supression_log,c(model="nocluster.factor.3.starting.state",supressed_pct=cur.model$supressed))
#nocluster.nofactor.starting.state
cur.model<-calc.single.model(clustered.data=start.of.seq,relevant.col.names=c("objectid","seq_id","timestamp","state_id"),factor.calculation=NA,by.col.names=c(),within.col.names=c("state_id"),statistics.calculations =c("n_distinct(seq_id)","n_distinct(objectid)","n()"),statistics.col.names=c("sequences","objects","total"),eps=c_eps)
nocluster.nofactor.starting.state <- to.valid.matrix(cur.model$stats)
supression_log <- rbind(supression_log,c(model="nocluster.nofactor.starting.state",supressed_pct=cur.model$supressed))
#calculate cluster transitions
cluster.transition <- start.of.seq
dplyr::ungroup(cluster.transition)
cluster.transition <- dplyr::group_by(cluster.transition,objectid)
cluster.transition <- dplyr::arrange(cluster.transition,timestamp)
cluster.transition <- dplyr::mutate(cluster.transition,next_id=lead(cluster_id),tbe=as.numeric((lead(timestamp)-timestamp),"secs"))
cluster.transition <- cluster.transition[!is.na(cluster.transition$next_id),]
dplyr::ungroup(cluster.transition)
mean.cluster.tbe <- mean(cluster.transition$tbe)
#factor.week.cluster.transition
#cur.model<-calc.single.model(clustered.data=cluster.transition,relevant.col.names=c("objectid","seq_id","cluster_id","timestamp","next_id","tbe"),factor.calculation="as.integer(ceiling(as.POSIXlt(timestamp)$yday/4))",by.col.names = c("cluster_id","factor"),within.col.names=c("next_id"),statistics.calculations =c("n_distinct(seq_id)","n_distinct(objectid)","n()","mean(tbe)","sd(tbe)"),statistics.col.names=c("sequences","objects","total","tbe","sd"),eps=c_eps)
cur.model<-calc.single.model(clustered.data=cluster.transition,relevant.col.names=c("objectid","seq_id","cluster_id","timestamp","next_id","tbe"),factor.calculation="as.numeric(format(as.POSIXlt(timestamp), \"%w\"))",by.col.names = c("cluster_id","factor"),within.col.names=c("next_id"),statistics.calculations =c("n_distinct(seq_id)","n_distinct(objectid)","n()","mean(tbe)","sd(tbe)"),statistics.col.names=c("sequences","objects","total","tbe","sd"),eps=c_eps)
factor.1.cluster.transition <- to.valid.matrix(cur.model$stats)
supression_log <- rbind(supression_log,c(model="factor.1.cluster.transition",supressed_pct=cur.model$supressed))
#factor.month.cluster.transition
cur.model<-calc.single.model(clustered.data=cluster.transition,relevant.col.names=c("objectid","seq_id","cluster_id","timestamp","next_id","tbe"),factor.calculation="as.POSIXlt(timestamp)$mon",by.col.names = c("cluster_id","factor"),within.col.names=c("next_id"),statistics.calculations =c("n_distinct(seq_id)","n_distinct(objectid)","n()","mean(tbe)","sd(tbe)"),statistics.col.names=c("sequences","objects","total","tbe","sd"),eps=c_eps)
factor.2.cluster.transition <- to.valid.matrix(cur.model$stats)
supression_log <- rbind(supression_log,c(model="factor.2.cluster.transition",supressed_pct=cur.model$supressed))
#factor.year.cluster.transition
cur.model<-calc.single.model(clustered.data=cluster.transition,relevant.col.names=c("objectid","seq_id","cluster_id","timestamp","next_id","tbe"),factor.calculation="as.POSIXlt(timestamp)$year",by.col.names = c("cluster_id","factor"),within.col.names=c("next_id"),statistics.calculations =c("n_distinct(seq_id)","n_distinct(objectid)","n()","mean(tbe)","sd(tbe)"),statistics.col.names=c("sequences","objects","total","tbe","sd"),eps=c_eps)
factor.3.cluster.transition <- to.valid.matrix(cur.model$stats)
supression_log <- rbind(supression_log,c(model="factor.3.cluster.transition",supressed_pct=cur.model$supressed))
#nofactor.cluster.transition
cur.model<-calc.single.model(clustered.data=cluster.transition,relevant.col.names=c("objectid","seq_id","cluster_id","timestamp","next_id","tbe"),factor.calculation=NA,by.col.names = c("cluster_id"),within.col.names=c("next_id"),statistics.calculations =c("n_distinct(seq_id)","n_distinct(objectid)","n()","mean(tbe)","sd(tbe)"),statistics.col.names=c("sequences","objects","total","tbe","sd"),eps=c_eps)
nofactor.cluster.transition <- to.valid.matrix(cur.model$stats)
supression_log <- rbind(supression_log,c(model="nofactor.cluster.transition",supressed_pct=cur.model$supressed))
sequences<- dplyr::ungroup(sequences)
View(sequences)
s <- clustered.data
s$next_seqid <- c(s$seq_id[2:dim(s)[1]],NA)
s$next_state_id <- c(s$state_id[2:dim(s)[1]],NA)
s$next_state_id <- ifelse(s$next_seqid!=s$seq_id, NA, s$next_state_id)
s$next_state_id <- ifelse(is.na(s$next_state_id), NA, s$next_state_id)
s$tbe <- c(s$timestamp[2:dim(s)[1]],NA)- s$timestamp
s$tbe <- ifelse(s$next_seqid!=s$seq_id, NA, s$tbe)
View(s)
View(s)
View(df)
View(df)
View(clustered.data)
require(cluster)
require(MinHash)
require(TraMineR)
require(gmp)
# s - structured set of transactions
# clusters.k - number of clusters
# sim.measure - 0 for LCS, 1 for LSH
# the folowing parameters are only required for LSH (sim.measure=1)
# shingle.size - size of subsequences to be hashed (1 for a, 2 for a-b, 3 for a-b-c ect.)
# num.hashes - number of hash function used for signaturing a sequence
cluster.sequences <- function(s,clusters.k,sim.measure,shingle.size,num.hashes)
{
res <- calc.seq.obj(s)
sequences <- res[[2]]
seq.idx <- res[[1]]
#calculate distance matrix
if (sim.measure==0){
dist.m<- calc.pairwise.lcs(sequences)
} else if (sim.measure==1){
dist.m<- MinHash::calc.lsh(sequences,NULL,shingle.size,num.hashes)
}
#cluster sequences according to distance matrix
clusterward <- cluster::agnes(dist.m , diss = T, method = "ward")
rm(dist.m)
cur.k<-min(clusters.k,length(seq.idx))
clusters <- cutree(clusterward, k = cur.k)
#   #ploting clusters
#    cpal(D.seq)<-c(1:227)
#    lab <- factor(clusters, labels = paste("Cluster", 1:clusters.k))
#
#   seqplot(D.seq, type="f", group=lab)
#   seqplot(D.seq, type="i", group=lab)
#   seqrplot(D.seq, group = lab, dist.matrix = dist,criterion="density",trep=0.35,ylab=c(0,20))#,
#   seqdplot(D.seq, group = lab)#state distribution across time from optimal matching distance ,
#seq.rep<- seqrep(D.seq, group = lab, dist.matrix = dist,
#         criteria = "centrality", nrep=1)
#seqrplot(D.seq, group = lab, dist.matrix = dist,criterion="density",trep=0.35)#,
#         criteria = "prob", nrep=1)
# table(clusters)
#adding cluster id to origin data
#seqfplot(d4d.seq, group = clusters, pbarw = T)
clustered.seqe <- cbind(seq.idx, as.vector(clusters))
colnames(clustered.seqe) <- c( 'id', 'cluster_id')
clustered.transactions <- merge(s,clustered.seqe,by.x="id",by.y="seq_id",all = TRUE)
rm(clusterward)
rm(clusters)
rm(clustered.seqe)
#rename "id" column to "seq_id"
names(clustered.transactions)[1]<- "seq_id"
clustered.transactions
}
#df.clustered <- cluster.sequences(s=df,clusters.k=3,sim.measure=1,shingle.size=1,num.hashes=50)
calc.seq.obj <- function(d)
{
#creating TSE object and converting it into STS object
#d.seq_id <- as.numeric(factor(d$seq_id))
###d.seq_id <- d$seq_id
d.seq_id <-as.numeric(factor(paste(d[,"seq_id"],d[,"objectid"],sep="-")))
d.seqe <- TraMineR::seqecreate(id = d.seq_id, timestamp = (as.numeric(as.POSIXct(unlist(d[,"timestamp"]),origin='1970-01-01')) - as.numeric(as.POSIXct('1970-01-01',origin='1970-01-01'))),event = d[,"state_id"])
tmp <- as.character(d.seqe)
open <- "("
close <- ")"
tmp <- gsub("[1234567890e+.]+-", replacement=",", x=tmp, fixed=FALSE)
tmp <- gsub(",", replacement="-", x=tmp, fixed=TRUE)
tmp <- gsub(open, replacement="", x=tmp, fixed=TRUE)
tmp <- gsub(close, replacement="", x=tmp, fixed=TRUE)
tmp <- gsub("--", replacement="-", x=tmp, fixed=TRUE)
tmp <- substr(tmp ,2,nchar(tmp))
## Make a state sequence object from the lists of events
d.seq <- TraMineR::seqdef(tmp, sep=",")
rm(tmp)
#seq.idx <- group_by(d,seq_id)
#seq.idx <-arrange(seq.idx,timestamp)
#seq.idx <- filter(seq.idx, timestamp == first(timestamp))$seq_id
#list(seq.idx,d.seq)
list(TraMineR::seqeid(d.seqe),d.seq)
}
df.clustered <- cluster.sequences(s=df,clusters.k=cur.k,sim.measure=similarity,shingle.size=2,num.hashes=200)
require(cluster)
require(MinHash)
require(TraMineR)
require(gmp)
# s - structured set of transactions
# clusters.k - number of clusters
# sim.measure - 0 for LCS, 1 for LSH
# the folowing parameters are only required for LSH (sim.measure=1)
# shingle.size - size of subsequences to be hashed (1 for a, 2 for a-b, 3 for a-b-c ect.)
# num.hashes - number of hash function used for signaturing a sequence
cluster.sequences <- function(s,clusters.k,sim.measure,shingle.size,num.hashes)
{
res <- calc.seq.obj(s)
sequences <- res[[2]]
seq.idx <- res[[1]]
#calculate distance matrix
if (sim.measure==0){
dist.m<- calc.pairwise.lcs(sequences)
} else if (sim.measure==1){
dist.m<- MinHash::calc.lsh(sequences,NULL,shingle.size,num.hashes)
}
#cluster sequences according to distance matrix
clusterward <- cluster::agnes(dist.m , diss = T, method = "ward")
rm(dist.m)
cur.k<-min(clusters.k,length(seq.idx))
clusters <- cutree(clusterward, k = cur.k)
#   #ploting clusters
#    cpal(D.seq)<-c(1:227)
#    lab <- factor(clusters, labels = paste("Cluster", 1:clusters.k))
#
#   seqplot(D.seq, type="f", group=lab)
#   seqplot(D.seq, type="i", group=lab)
#   seqrplot(D.seq, group = lab, dist.matrix = dist,criterion="density",trep=0.35,ylab=c(0,20))#,
#   seqdplot(D.seq, group = lab)#state distribution across time from optimal matching distance ,
#seq.rep<- seqrep(D.seq, group = lab, dist.matrix = dist,
#         criteria = "centrality", nrep=1)
#seqrplot(D.seq, group = lab, dist.matrix = dist,criterion="density",trep=0.35)#,
#         criteria = "prob", nrep=1)
# table(clusters)
#adding cluster id to origin data
#seqfplot(d4d.seq, group = clusters, pbarw = T)
clustered.seqe <- cbind(seq.idx, as.vector(clusters))
colnames(clustered.seqe) <- c( 'id', 'cluster_id')
clustered.transactions <- merge(s,clustered.seqe,by.y="id",by.x="seq_id",all = TRUE)
rm(clusterward)
rm(clusters)
rm(clustered.seqe)
#rename "id" column to "seq_id"
names(clustered.transactions)[1]<- "seq_id"
clustered.transactions
}
#df.clustered <- cluster.sequences(s=df,clusters.k=3,sim.measure=1,shingle.size=1,num.hashes=50)
calc.seq.obj <- function(d)
{
#creating TSE object and converting it into STS object
#d.seq_id <- as.numeric(factor(d$seq_id))
###d.seq_id <- d$seq_id
d.seq_id <-as.numeric(factor(paste(d[,"seq_id"],d[,"objectid"],sep="-")))
d.seqe <- TraMineR::seqecreate(id = d.seq_id, timestamp = (as.numeric(as.POSIXct(unlist(d[,"timestamp"]),origin='1970-01-01')) - as.numeric(as.POSIXct('1970-01-01',origin='1970-01-01'))),event = d[,"state_id"])
tmp <- as.character(d.seqe)
open <- "("
close <- ")"
tmp <- gsub("[1234567890e+.]+-", replacement=",", x=tmp, fixed=FALSE)
tmp <- gsub(",", replacement="-", x=tmp, fixed=TRUE)
tmp <- gsub(open, replacement="", x=tmp, fixed=TRUE)
tmp <- gsub(close, replacement="", x=tmp, fixed=TRUE)
tmp <- gsub("--", replacement="-", x=tmp, fixed=TRUE)
tmp <- substr(tmp ,2,nchar(tmp))
## Make a state sequence object from the lists of events
d.seq <- TraMineR::seqdef(tmp, sep=",")
rm(tmp)
#seq.idx <- group_by(d,seq_id)
#seq.idx <-arrange(seq.idx,timestamp)
#seq.idx <- filter(seq.idx, timestamp == first(timestamp))$seq_id
#list(seq.idx,d.seq)
list(TraMineR::seqeid(d.seqe),d.seq)
}
set.seed(123)
df.clustered <- cluster.sequences(s=df,clusters.k=cur.k,sim.measure=similarity,shingle.size=2,num.hashes=200)
View(df.clustered)
set.seed(123)
synthetic.data <- generate.synthetic.data(m=model,p.method=inverse_method)
#synthetic.data<- init.transactions.dataset(data=synthetic.data,objectid.pos=1,timestamp.pos=3,stateid.pos=4,seq_id.pos=2)
#synthetic.obj<- sequencesGenerator(data=synthetic.data,objectid.pos=1,timestamp.pos=3,stateid.pos=4,seq_id.pos=2,timestamp.format='%Y-%m-%d %H:%M:%S')
#synthetic.data <-synthetic.obj$src
#df$state <- with(generator$states_dictionary, value[match(df$state_id,key)])
#calc_states.sequencesGenerator
#generator<- add_states(generator)
library(sequencesAnonymizer)
install.packages("D:/sigal/doctorat/thesis/sequencesAnonymizer_0.1.tar.gz", repos = NULL, type = "source")
#library("sequencesGenerator")
require("sequencesAnonymizer")
require("MinHash")
input.file.name <- 'D2.csv'
#colnames(f1)<- c("objectid","timestamp","state_id")
objectid.pos<-1
timestamp.pos<-2
stateid.pos<-3
secs.between.sequences <- 800*60 #according to examined histogram based on first 100000 records
sample.size <- 25000
k=25
similarity=1
inverse_method=T
skip=F
timestamp.format='%Y-%m-%d %H:%M:%S'
f <- read.delim(input.file.name, header=T, sep=',',skip=skip,nrows=sample.size,stringsAsFactors =F)
#generator<- sequencesGenerator(f,objectid.pos=objectid.pos,seq_id.pos=0,timestamp.pos=timestamp.pos,stateid.pos=stateid.pos,secs.between.sequences=secs.between.sequences,timestamp.format='%Y-%m-%dT%H:%M:%S')
generator<- sequencesGenerator(f,objectid.pos=objectid.pos,timestamp.pos=timestamp.pos,stateid.pos=stateid.pos,seq_id.pos=0,secs.between.sequences=secs.between.sequences,timestamp.format=timestamp.format)
df <- generator$src
rm(f)
n.sequences <- length(unique(df$seq_id))
if(k==0)
{
cur.k=1
} else {
cur.k = ceiling(k/100 * n.sequences)
}
#cur.k=1
set.seed(123)
df.clustered <- cluster.sequences(s=df,clusters.k=cur.k,sim.measure=similarity,shingle.size=2,num.hashes=200)
model<-build.model(clustered.data=df.clustered,c_eps=1)#,min.objects=0,max.freq=1)
#M<-build.model(clustered.data=df.clustered,min.objects=0,max.freq=1)
#setwd("D:\\sigal\\doctorat\\thesis\\sequencesGenerator");
set.seed(123)
synthetic.data <- generate.synthetic.data(m=model,p.method=inverse_method)
#synthetic.dat
setwd('D:\\sigal\\doctorat\\עיבוד הצעת מחקר ומצגת לבחינה')
input.file.name <- 'D2.csv'
#colnames(f1)<- c("objectid","timestamp","state_id")
objectid.pos<-1
timestamp.pos<-2
stateid.pos<-3
secs.between.sequences <- 800*60 #according to examined histogram based on first 100000 records
sample.size <- 25000
k=25
similarity=1
inverse_method=T
skip=F
timestamp.format='%Y-%m-%d %H:%M:%S'
f <- read.delim(input.file.name, header=T, sep=',',skip=skip,nrows=sample.size,stringsAsFactors =F)
#generator<- sequencesGenerator(f,objectid.pos=objectid.pos,seq_id.pos=0,timestamp.pos=timestamp.pos,stateid.pos=stateid.pos,secs.between.sequences=secs.between.sequences,timestamp.format='%Y-%m-%dT%H:%M:%S')
generator<- sequencesGenerator(f,objectid.pos=objectid.pos,timestamp.pos=timestamp.pos,stateid.pos=stateid.pos,seq_id.pos=0,secs.between.sequences=secs.between.sequences,timestamp.format=timestamp.format)
df <- generator$src
rm(f)
n.sequences <- length(unique(df$seq_id))
if(k==0)
{
cur.k=1
} else {
cur.k = ceiling(k/100 * n.sequences)
}
#cur.k=1
set.seed(123)
df.clustered <- cluster.sequences(s=df,clusters.k=cur.k,sim.measure=similarity,shingle.size=2,num.hashes=200)
model<-build.model(clustered.data=df.clustered,c_eps=1)#,min.objects=0,max.freq=1)
#M<-build.model(clustered.data=df.clustered,min.objects=0,max.freq=1)
#setwd("D:\\sigal\\doctorat\\thesis\\sequencesGenerator");
set.seed(123)
synthetic.data <- generate.synthetic.data(m=model,p.method=inverse_method)
#synthetic.dat
library(sequencesAnonymizer)
#library("sequencesGenerator")
require("sequencesAnonymizer")
require("MinHash")
setwd('D:\\sigal\\doctorat\\עיבוד הצעת מחקר ומצגת לבחינה')
input.file.name <- 'D2.csv'
#colnames(f1)<- c("objectid","timestamp","state_id")
objectid.pos<-1
timestamp.pos<-2
stateid.pos<-3
secs.between.sequences <- 800*60 #according to examined histogram based on first 100000 records
sample.size <- 25000
k=25
similarity=1
inverse_method=T
skip=F
timestamp.format='%Y-%m-%d %H:%M:%S'
f <- read.delim(input.file.name, header=T, sep=',',skip=skip,nrows=sample.size,stringsAsFactors =F)
#generator<- sequencesGenerator(f,objectid.pos=objectid.pos,seq_id.pos=0,timestamp.pos=timestamp.pos,stateid.pos=stateid.pos,secs.between.sequences=secs.between.sequences,timestamp.format='%Y-%m-%dT%H:%M:%S')
generator<- sequencesGenerator(f,objectid.pos=objectid.pos,timestamp.pos=timestamp.pos,stateid.pos=stateid.pos,seq_id.pos=0,secs.between.sequences=secs.between.sequences,timestamp.format=timestamp.format)
df <- generator$src
rm(f)
n.sequences <- length(unique(df$seq_id))
if(k==0)
{
cur.k=1
} else {
cur.k = ceiling(k/100 * n.sequences)
}
#cur.k=1
set.seed(123)
df.clustered <- cluster.sequences(s=df,clusters.k=cur.k,sim.measure=similarity,shingle.size=2,num.hashes=200)
model<-build.model(clustered.data=df.clustered,c_eps=1)#,min.objects=0,max.freq=1)
#M<-build.model(clustered.data=df.clustered,min.objects=0,max.freq=1)
#setwd("D:\\sigal\\doctorat\\thesis\\sequencesGenerator");
set.seed(123)
synthetic.data <- generate.synthetic.data(m=model,p.method=inverse_method)
#synthetic.data<- init.transactions.dataset(data=synthetic.data,objectid.pos=1,timestamp.pos=3,stateid.pos=4,seq_id.pos=2)
View(synthetic.data)
mean.seq.dist.lsh(df,as.data.frame(synthetic.data),shingle.size=1,num.hashes=200)
mean.obj.dist.lsh(df,as.data.frame(synthetic.data),shingle.size=1,num.hashes=200)
compare.frequent.itemset(d1=df,d2=synthetic.data,top=25)
shingle.size=1
num.hashes=200
d2=as.data.frame(synthetic.data)
d1=df
d1_ <- d1
d1_$seq_id <- d1_$objectid
d2_ <- d2
d2_$seq_id <- d2_$objectid
op <- options(warn = (-1)) # suppress warnings
d1.seq <- calc.seq.obj(d1_)[[2]]
d2.seq <- calc.seq.obj(d2_)[[2]]
dist<- calc.lsh(d1.seq,d2.seq,shingle.size,num.hashes)
op <- options(warn = (1)) # cancel suppression
mean(apply(dist,2,min))
op <- options(warn = (-1)) # suppress warnings
d1.seq <- calc.seq.obj(d1)[[2]]
d2.seq <- calc.seq.obj(d2)[[2]]
s=d2
d=d2
d.seq_id <-as.numeric(factor(paste(d[,"seq_id"],d[,"objectid"],sep="-")))
d.seqe <- TraMineR::seqecreate(id = d.seq_id, timestamp = (as.numeric(as.POSIXct(unlist(d[,"timestamp"]),origin='1970-01-01')) - as.numeric(as.POSIXct('1970-01-01',origin='1970-01-01'))),event = d[,"state_id"])
d.seq_id
d.seq_id <-as.numeric(factor(paste(d[,"objectid"],d[,"seq_id"],sep="-")))
d.seqe <- TraMineR::seqecreate(id = d.seq_id, timestamp = (as.numeric(as.POSIXct(unlist(d[,"timestamp"]),origin='1970-01-01')) - as.numeric(as.POSIXct('1970-01-01',origin='1970-01-01'))),event = d[,"state_id"])
d.seq_id
length(d.seq_id)
length(as.numeric(as.POSIXct(unlist(d[,"timestamp"])
)
length(as.numeric(as.POSIXct(unlist(d[,"timestamp"]),origin='1970-01-01')) - as.numeric(as.POSIXct('1970-01-01',origin='1970-01-01')))
length(event = d[,"state_id"])
length( d[,"state_id"])
d.seq_id
library(sequencesAnonymizer)
library(sequencesAnonymizer)
library(sequencesAnonymizer)
